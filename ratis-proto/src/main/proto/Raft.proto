/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "org.apache.ratis.proto";
option java_outer_classname = "RaftProtos";
option java_generate_equals_and_hash = true;
package ratis.common;

message RaftPeerProto {
  bytes id = 1;      // id of the peer
  string address = 2; // e.g. address of the RPC server
  uint32 priority = 3; // priority of the peer
  string dataStreamAddress = 4; // address of the data stream server
  string clientAddress = 5; // address of the client RPC server
  string adminAddress = 6; // address of the admin RPC server
}

message RaftPeerIdProto {
  //节点自身id
  bytes id = 1;      // id of the peer
}

message RaftGroupIdProto {
  //通信的组id
  bytes id = 1;
}

message RaftGroupProto {
  RaftGroupIdProto groupId = 1;
  repeated RaftPeerProto peers = 2;
}

message RaftGroupMemberIdProto {
  bytes peerId = 1;
  RaftGroupIdProto groupId = 2;
}

message RaftConfigurationProto {
  repeated RaftPeerProto peers = 1; // the peers in the current or new conf
  repeated RaftPeerProto oldPeers = 2; // the peers in the old conf
}

message StateMachineEntryProto {
   /**
    * StateMachine specific data which is not written to log.
    * Unlike logEntryData, stateMachineData is managed and stored by the StateMachine but not the RaftLog.
    */
  bytes stateMachineData = 1;
   /**
    * When stateMachineData is missing, it is the size of the serialized LogEntryProto along with stateMachineData.
    * When stateMachineData is not missing, it must be set to zero.
    */
  uint32 logEntryProtoSerializedSize = 2;
}

message StateMachineLogEntryProto {
  // TODO: This is not super efficient if the SM itself uses PB to serialize its own data for a
  /** RaftLog entry data */
  bytes logData = 1;
  /**
   * StateMachine entry.
   * StateMachine implementation may use this field to separate StateMachine specific data from the RaftLog data.
   */
  StateMachineEntryProto stateMachineEntry = 2;

  enum Type {
    WRITE = 0;
    DATASTREAM = 1;
  }

  Type type = 13;
  // clientId and callId are used to rebuild the retry cache.
  bytes clientId = 14;
  uint64 callId = 15;
}

message MetadataProto {
  uint64 commitIndex = 1;
}

message LogEntryProto {
  //日志任期
  uint64 term = 1;
  //日志索引
  uint64 index = 2;
  //共用体
  //这里就可以有三种用途：
  //状态机日志的数据
  //集群配置
  //已提交的最大索引号
  oneof LogEntryBody {
    StateMachineLogEntryProto stateMachineLogEntry = 3;
    RaftConfigurationProto configurationEntry = 4;
    MetadataProto metadataEntry = 5;
  }
}

message TermIndexProto {
  uint64 term = 1;
  uint64 index = 2;
}

//主要是包含请求包含的东西
message RaftRpcRequestProto {
  //就是请求者的id（服务器id）
  bytes requestorId = 1;
  bytes replyId = 2;
  //raft所属的组
  RaftGroupIdProto raftGroupId = 3;
  uint64 callId = 4;

  //请求允许的超时时间
  uint64 timeoutMs = 13;
  //路由表
  RoutingTableProto routingTable = 14;
  //滑动窗口
  SlidingWindowEntry slidingWindowEntry = 15;
}

message SlidingWindowEntry {
  uint64 seqNum = 1; // 0 for non-sliding-window requests; >= 1 for sliding-window requests
  bool isFirst = 2;  // Is this the first request of the sliding window?
}

message RaftRpcReplyProto {
  bytes requestorId = 1;
  bytes replyId = 2;
  RaftGroupIdProto raftGroupId = 3;
  uint64 callId = 4;

  bool success = 15;
}

message FileChunkProto {
  string filename = 1; // relative to root
  uint64 totalSize = 2;
  bytes fileDigest = 3;
  uint32 chunkIndex = 4;
  uint64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

enum InstallSnapshotResult {
  SUCCESS = 0;
  NOT_LEADER = 1;
  IN_PROGRESS = 2;
  ALREADY_INSTALLED = 3;
  CONF_MISMATCH = 4;
}

message RequestVoteRequestProto {
  //请求头
  RaftRpcRequestProto serverRequest = 1;
  //该节点的任期，该任期是节点是否接收其他节点的重要数据
  uint64 candidateTerm = 2;
  //这个是用来确保该节点的最后日志条目是否是绝大多数最新的
  TermIndexProto candidateLastEntry = 3;
  //这个用来防止该节点因为网络原因（能够发送消息，不能接收消息）不断进行重试选举，
  //而迫使真正领导者不断下台，不断选举，从而失去了活性
  bool preVote = 4;
}

message RequestVoteReplyProto {
  //回复头
  RaftRpcReplyProto serverReply = 1;
  //处理请求节点的任期，候选者根据这个更新自己的状态
  uint64 term = 2;
  bool shouldShutdown = 3;
}

message CommitInfoProto {
  RaftPeerProto server = 1;
  uint64 commitIndex = 2;
}

//这是leader复制日志的请求数据
//当然还有一个nextIndex[]变量（存于leader自身）用来在合适的地方追加follower的日志
message AppendEntriesRequestProto {
  //请求头
  RaftRpcRequestProto serverRequest = 1;
  //leader的当前任期
  uint64 leaderTerm = 2;
  //leader想要追加新日志条目的前一个日志条目，用于follower日志一致性检查
  //确保新日志的前一个日志条目和follower的最后一个日志条目是一致的，不然就会复制不成功
  TermIndexProto previousLog = 3;
  //需要复制的日志条目
  repeated LogEntryProto entries = 4;
  //leader已提交索引号，用于follower提交
  uint64 leaderCommit = 5;
  bool initializing = 6;

  //自己的信息
  repeated CommitInfoProto commitInfos = 15;
}

//追加日志的结果
message AppendEntriesReplyProto {
  enum AppendResult {
    //成功
    SUCCESS = 0;
    //请求节点任期不够大
    NOT_LEADER = 1; // the requester's term is not large enough
    INCONSISTENCY = 2; // gap between the local log and the entries or snapshot installation in progress or
                       // overlap between local snapshot and the entries
  }

  RaftRpcReplyProto serverReply = 1;
  //follower节点的任期
  uint64 term = 2;
  //下一个要追加的索引（所以这里直接告诉leader从哪里追加）
  uint64 nextIndex = 3;
  AppendResult result = 4;
  //follower节点已提交的最大索引号
  uint64 followerCommit = 5;
  uint64 matchIndex = 6;
  //心跳
  bool isHearbeat = 7;
}

message InstallSnapshotRequestProto {
  message SnapshotChunkProto {
    string requestId = 1; // an identifier for chunked-requests.
    uint32 requestIndex = 2; // the index for this request chunk. Starts from 0.
    RaftConfigurationProto raftConfiguration = 3;
    TermIndexProto termIndex = 4;//快照的最后一个日志条目
    repeated FileChunkProto fileChunks = 5;
    uint64 totalSize = 6;
    bool done = 7; // whether this is the final chunk for the same req.
  }

  message NotificationProto {
    TermIndexProto firstAvailableTermIndex = 1; // first available log index to notify Follower to install snapshot.
  }

  RaftRpcRequestProto serverRequest = 1;
  uint64 leaderTerm = 2;

  oneof InstallSnapshotRequestBody {
    SnapshotChunkProto snapshotChunk = 3;
    NotificationProto notification = 4;
  }

  LogEntryProto lastRaftConfigurationLogEntryProto = 5;
}

message InstallSnapshotReplyProto {
  RaftRpcReplyProto serverReply = 1;
  uint64 term = 2;
  InstallSnapshotResult result = 3;

  oneof InstallSnapshotReplyBody {
    uint32 requestIndex = 4;  // index of the snapshot chunk request.
    uint64 snapshotIndex = 5; // index of snapshot installed after notification.
  }
}

message ClientMessageEntryProto {
  bytes content = 1;
}

enum ReplicationLevel {
  /** Committed at the leader and replicated to the majority of peers. */
  MAJORITY = 0;
  /** Committed at the leader and replicated to all peers.
       Note that ReplicationLevel.ALL implies ReplicationLevel.MAJORITY. */
  ALL = 1;

  /** Committed at majority peers.
      Note that ReplicationLevel.MAJORITY_COMMITTED implies ReplicationLevel.MAJORITY. */
  MAJORITY_COMMITTED = 2;

  /** Committed at all peers.
      Note that ReplicationLevel.ALL_COMMITTED implies ReplicationLevel.ALL
      and ReplicationLevel.MAJORITY_COMMITTED */
  ALL_COMMITTED = 3;
}


/** Role of raft peer */
enum RaftPeerRole {
  LEADER = 0;
  CANDIDATE = 1;
  FOLLOWER = 2;
}

message WriteRequestTypeProto {
}

message MessageStreamRequestTypeProto {
  uint64 streamId = 1;  // the id of this stream
  uint64 messageId = 2; // the message id within a particular stream.
  bool endOfRequest = 3;// Is this the end-of-request?
}

message DataStreamRequestTypeProto {
}

message ForwardRequestTypeProto {
}

message ReadRequestTypeProto {
}

message StaleReadRequestTypeProto {
  uint64 minIndex = 1;
}

message WatchRequestTypeProto {
  uint64 index = 1;
  ReplicationLevel replication = 2;
}

//路由信息（主要是节点的id信息）
message RouteProto {
  //代表自己
  RaftPeerIdProto peerId = 1;
  //其他节点
  repeated RaftPeerIdProto successors = 2;
}

message RoutingTableProto {
  //多个路由表？？？
  repeated RouteProto routes = 1;
}

// normal client request
//client节点的请求参数
message RaftClientRequestProto {
  //请求头
  RaftRpcRequestProto rpcRequest = 1;
  //内容
  ClientMessageEntryProto message = 2;

  oneof Type {
    //写请求
    WriteRequestTypeProto write = 3;
    //读请求
    ReadRequestTypeProto read = 4;
    //旧读？
    StaleReadRequestTypeProto staleRead = 5;
    //监控请求？
    WatchRequestTypeProto watch = 6;
    //消息流请求
    MessageStreamRequestTypeProto messageStream = 7;
    //数据流请求
    DataStreamRequestTypeProto dataStream = 8;
    //转发请求
    ForwardRequestTypeProto forward = 9;
  }
}

message DataStreamPacketHeaderProto {
  enum Type {
    STREAM_HEADER = 0;
    STREAM_DATA = 1;
  }

  enum Option {
    SYNC = 0;
    CLOSE = 1;
  }

  bytes clientId = 1;
  Type type = 2;
  uint64 streamId = 3;
  uint64 streamOffset = 4;
  uint64 dataLength = 5;
  repeated Option options = 6;
}

message DataStreamRequestHeaderProto {
  DataStreamPacketHeaderProto packetHeader = 1;
}

message DataStreamReplyHeaderProto {
  DataStreamPacketHeaderProto packetHeader = 1;
  uint64 bytesWritten = 2;
  bool success = 3;
}

message NotLeaderExceptionProto {
  RaftPeerProto suggestedLeader = 1;
  repeated RaftPeerProto peersInConf = 2;
}

message LeaderNotReadyExceptionProto {
  RaftGroupMemberIdProto serverId = 1; // id of the leader
}

message NotReplicatedExceptionProto {
  uint64 callId = 1;
  ReplicationLevel replication = 2;
  uint64 logIndex = 3;
}

message StateMachineExceptionProto {
  string exceptionClassName = 1;
  string errorMsg = 2;
  bytes stacktrace = 3;
}

message AlreadyClosedExceptionProto {
  string exceptionClassName = 1;
  string errorMsg = 2;
  bytes stacktrace = 3;
}

message ThrowableProto {
  string className = 1;
  string errorMessage = 2;
  bytes stackTrace = 3;
  bytes cause = 4;
}

message RaftClientReplyProto {
  RaftRpcReplyProto rpcReply = 1;
  ClientMessageEntryProto message = 2;

  oneof ExceptionDetails {
    NotLeaderExceptionProto notLeaderException = 3;
    NotReplicatedExceptionProto notReplicatedException = 4;
    StateMachineExceptionProto stateMachineException = 5;
    LeaderNotReadyExceptionProto leaderNotReadyException = 6;
    AlreadyClosedExceptionProto alreadyClosedException = 7;
    ThrowableProto dataStreamException = 8;
    ThrowableProto leaderSteppingDownException = 9;
    ThrowableProto transferLeadershipException = 10;
  }

  uint64 logIndex = 14; // When the request is a write request and the reply is success, the log index of the transaction
  repeated CommitInfoProto commitInfos = 15;
}

// setConfiguration request
message SetConfigurationRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  repeated RaftPeerProto peers = 2;
}

// transfer leadership request
message TransferLeadershipRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  RaftPeerProto newLeader = 2;
}

//选举请求？投票不就是选举吗
message StartLeaderElectionRequestProto {
  RaftRpcRequestProto serverRequest = 1;
  //leader的最后一个日志条目
  TermIndexProto leaderLastEntry = 2;
}

message StartLeaderElectionReplyProto {
  RaftRpcReplyProto serverReply = 1;
}

// A request to add a new group
message GroupAddRequestProto {
  RaftGroupProto group = 1; // the group to be added.
}

message GroupRemoveRequestProto {
  RaftGroupIdProto groupId = 1; // the group to be removed.
  bool deleteDirectory = 2; // delete the directory for that group?
  bool renameDirectory = 3; // rename the directory if not deleted.
}

message GroupManagementRequestProto {
  RaftRpcRequestProto rpcRequest = 1;

  oneof Op {
    GroupAddRequestProto groupAdd = 2;
    GroupRemoveRequestProto groupRemove = 3;
  }
}

// server info requests
message GroupListRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
}

message GroupInfoRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  RaftGroupIdProto groupId = 2;
}

message ServerRpcProto {
  RaftPeerProto id = 1;
  uint64 lastRpcElapsedTimeMs = 2;
}

message LeaderInfoProto {
  repeated ServerRpcProto followerInfo = 1;
  uint64 term = 2;
}

message FollowerInfoProto {
  ServerRpcProto leaderInfo = 1;
  uint32 outstandingOp = 2;
}

message CandidateInfoProto {
  uint64 lastLeaderElapsedTimeMs = 1;
}

message RoleInfoProto {
  RaftPeerProto self = 1;
  RaftPeerRole role = 2;
  uint64 roleElapsedTimeMs = 3;

  oneof PeerInfo {
    LeaderInfoProto leaderInfo = 4;
    FollowerInfoProto followerInfo = 5;
    CandidateInfoProto candidateInfo = 6;
  }
}

message GroupListReplyProto {
  RaftRpcReplyProto rpcReply = 1;
  repeated RaftGroupIdProto groupId = 2;
}

message GroupInfoReplyProto {
  RaftRpcReplyProto rpcReply = 1;
  RaftGroupProto group = 2;
  RoleInfoProto role = 3;
  bool isRaftStorageHealthy = 4;
  repeated CommitInfoProto commitInfos = 5;
}
